name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger "trx;LogFileName=test-results.trx"
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./coverage/test-results.trx
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: ./coverage/**/coverage.cobertura.xml
        
    - name: Generate coverage summary
      if: always()
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports generated successfully." >> $GITHUB_STEP_SUMMARY
        echo "- Coverage files: $(find ./coverage -name '*.xml' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Test results: $(if [ -f ./coverage/test-results.trx ]; then echo 'Available'; else echo 'Not found'; fi)" >> $GITHUB_STEP_SUMMARY
        
    - name: Publish API artifacts
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet publish src/Mpm.Api/Mpm.Api.csproj \
          --configuration Release \
          --no-build \
          --output ./publish/api
          
    - name: Publish Web artifacts
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet publish src/Mpm.Web/Mpm.Web.csproj \
          --configuration Release \
          --no-build \
          --output ./publish/web
          
    - name: Upload API artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: mpm-api
        path: ./publish/api/
        
    - name: Upload Web artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: mpm-web
        path: ./publish/web/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: mpm-api
        path: ./api-artifacts
        
    - name: Download Web artifacts
      uses: actions/download-artifact@v4
      with:
        name: mpm-web  
        path: ./web-artifacts
        
    - name: Deploy API to Azure Web App
      # Placeholder for Azure Web App deployment
      # Replace with actual deployment action when Azure resources are configured
      run: |
        echo "Deploying API to staging environment..."
        echo "API artifacts available at: ./api-artifacts"
        # Example:
        # - name: Deploy to Azure Web App
        #   uses: azure/webapps-deploy@v2
        #   with:
        #     app-name: ${{ secrets.AZURE_API_APP_NAME }}
        #     publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
        #     package: ./api-artifacts
        
    - name: Deploy Web to Azure Static Web Apps
      # Placeholder for Azure Static Web Apps deployment  
      # Replace with actual deployment action when Azure resources are configured
      run: |
        echo "Deploying Web to staging environment..."
        echo "Web artifacts available at: ./web-artifacts"
        # Example:
        # - name: Deploy to Azure Static Web Apps
        #   uses: Azure/static-web-apps-deploy@v1
        #   with:
        #     azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        #     repo_token: ${{ secrets.GITHUB_TOKEN }}
        #     action: "upload"
        #     app_location: "./web-artifacts"